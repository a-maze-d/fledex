# Copyright 2025, Matthias Reik <fledex@reik.org>
#
# SPDX-License-Identifier: Apache-2.0

if Mix.env() == :dev do
  defmodule Mix.Tasks.Docs.Fledex.Colors do
    use Mix.Task

    alias Fledex.Config

    @shortdoc "Generate documentation for all the available Fledex colors from various color modules"
    @requirements ["compile"]

    @moduledoc """
    Creates a markdown page for all the colors
    """
    @dir "./docs"
    @name "colors.md"

    @switches [
      path: :string,
      name: :string
    ]
    @aliases [
      o: :path,
      n: :name
    ]

    @doc false
    def run(args) do
      {cli_opts, _args, _invalid} =
        OptionParser.parse(args, aliases: @aliases, switches: @switches)

      out_dir = cli_opts[:path] || @dir
      out_name = cli_opts[:name] || @name
      file = Path.join(out_dir, out_name)

      Mix.shell().info([:green, "Generating Fledex Colors to #{file}"])
      content = create_content(Config.known_color_modules())
      File.write(file, content, [:utf8, :write])
    end

    defp create_content(modules) do
      Enum.reduce(modules, create_header(modules), fn {module, type, shortcut}, acc ->
        acc <> create_section(module, type, shortcut)
      end)
    end

    defp create_header(_modules) do
      """
      <!--
      Copyright 2025, Matthias Reik <fledex@reik.org>

      SPDX-License-Identifier: Apache-2.0
      Conent autogenerated through the `mix docs.fledex.colors` task
      -->

      # Color Names
      This is a list of all the colors that can be found in Fledex.
      The modules that are marked as `core` are thsoe that will be loaded by default
      if nothing else is mentioned. Those modules that are marked as `optional` are
      the ones that get shipped with `Fledex` but are not loaded by default.

      If you specify your own color list, you can make use of the alias name (`atom`).
      Therefore the sections are named with the alias instead of the module name.

      > #### Info {:.info}
      >
      > The colors get loaded by default in the ordered specified here, so if there
      > is a name conflict the former will win over latter.
      """
    end

    defp create_section(module, type, shortcut) do
      header = """
      ## :#{shortcut}
      (module: `#{module}`, type: `#{type}`, count: `#{length(module.names())}`)

      <table>
      <tr style='border-bottom: 2px solid #000000;'><th>Color</th><th>Name</th></tr>
      """

      module.colors()
      |> Enum.sort_by(& &1, fn left, right -> left.name < right.name end)
      |> Enum.reduce(header, fn color, acc ->
        acc <> create_table_row(color)
      end)
      |> close_table()
    end

    defp close_table(content) do
      content <>
        """
        </table>
        """
    end

    @base16 16
    defp create_table_row(color) do
      hex =
        color.hex
        |> Integer.to_string(@base16)
        |> String.pad_leading(6, "0")

      """
      <tr><td><div style="width: 25px; height: 25px; display: inline-block; background-color: ##{hex}; border: 1px solid black"></div></td><td><code>:#{color.name}</code></td></tr>
      """
    end
  end
end
