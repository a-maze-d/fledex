# Some simple tests

```elixir
Mix.install([
  # note: a relative path works on a computer, but does not work on nerves-livebook
  {:fledex, git: "http://maze:8GUXTAGJymEiJxh@diskmaze2:8418/maze/Fledex.git", tag: "0.1"},
  {:kino, "~>0.8"}
])

alias Fledex.Leds
alias Fledex.LedsDriver
alias Fledex.LedStripDriver.KinoDriver
alias Fledex.LedStripDriver.SpiDriver
alias Fledex.Color.Correction
:ok

# :ok = GenServer.stop(pid, :normal)
```

## Section

```elixir
# frame = Kino.Frame.new() |> Kino.render()

{:ok, pid} =
  LedsDriver.start_link(%{
    timer: %{only_dirty_update: false},
    led_strip: %{
      merge_strategy: :cap,
      driver_modules: [KinoDriver, SpiDriver],
      config: %{
        KinoDriver => %{
          update_freq: 1,
          color_correction: Fledex.Color.Correction.no_color_correction()
          # frame: frame
        },
        SpiDriver => %{
          color_correction:
            Correction.define_correction(
              Correction.Color.typicalSMD5050(),
              Correction.Temperature.uncorrectedTemperature()
            )
        }
      }
    }
  })
```

```elixir
defmodule Helpers do
  def red(namespace) do
    Enum.each(1..10, fn _index ->
      LedsDriver.set_leds(namespace, [0xFF0000, 0x000000, 0x000000, 0x000000, 0x00000])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0xFF0000, 0x000000, 0x000000, 0x00000])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0xFF0000, 0x000000, 0x00000])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0x000000, 0xFF0000, 0x00000])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000])
      Process.sleep(600)
    end)
  end

  def blue(namespace) do
    Enum.each(1..10, fn _index ->
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x00FF00])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0x000000, 0x0000FF, 0x000000, 0x00FF00])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0x0000FF, 0x000000, 0x000000, 0x00FF00])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x00FF00])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00])
      Process.sleep(600)
    end)
  end

  def rainbow(namespace) do
    Enum.each(0..10000, fn index ->
      config = %{
        num_leds: 50,
        reversed: true
      }

      Leds.new(50)
      |> Leds.func(:rainbow, config)
      |> Leds.send(%{namespace: namespace, offset: index})

      Process.sleep(100)
    end)
  end

  def gradient(namespace) do
    Enum.each(0..10000, fn index ->
      config = %{
        num_leds: 50,
        start_color: 0xFF0000,
        end_color: 0x0000FF
      }

      Leds.new(50)
      |> Leds.func(:gradient, config)
      |> Leds.send(%{namespace: namespace, offset: index, rotate_left: true})

      Process.sleep(100)
    end)
  end
end
```

```elixir
LedsDriver.define_namespace(:default)
spawn(fn -> Helpers.rainbow(:default) end)
```

```elixir
LedsDriver.define_namespace(:gradient)
spawn(fn -> Helpers.gradient(:gradient) end)
```

```elixir
LedsDriver.drop_namespace(:john)
LedsDriver.drop_namespace(:jane)
LedsDriver.drop_namespace(:default)
LedsDriver.drop_namespace(:gradient)
```

```elixir
LedsDriver.define_namespace(:john)
LedsDriver.define_namespace(:jane)
LedsDriver.define_namespace(:default)

spawn(fn -> Helpers.blue(:jane) end)
spawn(fn -> Helpers.red(:john) end)
spawn(fn -> Helpers.rainbow(:default) end)
```

```elixir
GenServer.stop(pid)
```
