# Using the animator

```elixir
# In this example we'll use the simple setup (experiments are inteded to not run on real
# hardware but on a normal livebook, This makes it easier to stay up-to-date and experiment
# We start to define our fledex library, directly linking to the latest version on github
Mix.install([
  {:fledex, git: "https://github.com/a-maze-d/fledex.git"},
  {:kino, "~>0.8"}
])

# we define a couple of aliases to not have to type that much
alias Fledex.Leds
alias Fledex.LedsDriver
alias Fledex.LedStripDriver.KinoDriver
alias Fledex.Color.Correction

:ok
```

## Section

In this example we will only use the simple setup functionality that will pick reasonable defaults

TODO: We still need to do this

```elixir
# frame = Kino.Frame.new() |> Kino.render()

{:ok, pid} = LedsDriver.start_link(:kino)
```

We now define a couple of helper functions. The first 2 functions are talking binaries directly
with the LED driver, the latter two are making use of the Leds client module that helps to
create nice effects like a rainbow.

```elixir
defmodule Helpers do
  def red(namespace) do
    Enum.each(1..10, fn _index ->
      LedsDriver.set_leds(namespace, [0xFF0000, 0x000000, 0x000000, 0x000000, 0x00000])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0xFF0000, 0x000000, 0x000000, 0x00000])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0xFF0000, 0x000000, 0x00000])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0x000000, 0xFF0000, 0x00000])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000])
      Process.sleep(600)
    end)
  end

  def blue(namespace) do
    Enum.each(1..10, fn _index ->
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x00FF00])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0x000000, 0x0000FF, 0x000000, 0x00FF00])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x000000, 0x0000FF, 0x000000, 0x000000, 0x00FF00])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x000000, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x00FF00])
      Process.sleep(600)
      LedsDriver.set_leds(namespace, [0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00])
      Process.sleep(600)
    end)
  end

  def rainbow(namespace) do
    Enum.each(0..10000, fn index ->
      config = %{
        num_leds: 50,
        reversed: true
      }

      Leds.new(50)
      |> Leds.func(:rainbow, config)
      |> Leds.send(%{namespace: namespace, offset: index})

      # before sending the next update we sleep a bit
      Process.sleep(100)
    end)
  end

  def gradient(namespace) do
    Enum.each(0..10000, fn index ->
      config = %{
        num_leds: 50,
        start_color: 0xFF0000,
        end_color: 0x0000FF
      }

      Leds.new(50)
      |> Leds.func(:gradient, config)
      |> Leds.send(%{namespace: namespace, offset: index, rotate_left: true})

      # before sending the next update we sleep a bit
      Process.sleep(100)
    end)
  end
end
```

Now use the above functions. We can run the functions by spawning a new thread. This allows to also see what happens if another thread works in parallel. Here we create a rainbow effect that will be send with an changing offset so that the rainbow rotates through the LEDs

```elixir
LedsDriver.define_namespace(:default)
spawn(fn -> Helpers.rainbow(:default) end)
```

Here we create a gradient between red and blue. Also this one we let rotate through

```elixir
LedsDriver.define_namespace(:gradient)
spawn(fn -> Helpers.gradient(:gradient) end)
```

We can drop the namespaces to see what happens

```elixir
LedsDriver.drop_namespace(:john)
LedsDriver.drop_namespace(:jane)
LedsDriver.drop_namespace(:default)
LedsDriver.drop_namespace(:gradient)
```

This test is running a couple of different ligth definitions in parallel.

```elixir
LedsDriver.define_namespace(:john)
LedsDriver.define_namespace(:jane)
LedsDriver.define_namespace(:default)

spawn(fn -> Helpers.blue(:jane) end)
spawn(fn -> Helpers.red(:john) end)
spawn(fn -> Helpers.rainbow(:default) end)
```

Once we are done we should stop our GenServer (even thoguh I rarely run this one ;-))

```elixir
GenServer.stop(pid)
```
