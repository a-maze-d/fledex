# Samu LEDs (Apa)

```elixir
Mix.install([
  {:circuits_spi, "~> 1.3"}
])
```

## Section

```elixir
# 1
{:ok, ref} =
  Circuits.SPI.open("spidev0.0",
    mode: 0,
    bits_per_word: 8,
    speed_hz: 1_000_000,
    delay_us: 10,
    lsb_first: false
  )

# 2
led_range = Enum.to_list(1..96)
timing_range = Enum.to_list(1..10_000)

# Enum.each(timing_range, fn tindex ->
#   # farbe = "FFFFFF"
#   # String.split(farbe)
#   data =
#     Enum.reduce(led_range, <<>>, fn lindex, leds ->
#       # leds <> <<255, 0, 0, 0, 0, 255, 0, 255, 0>>
#       leds <> <<rem(tindex * lindex + 0, 2) * 255, rem(tindex * lindex + 1, 2) * 255, 0>>
#     end)

#   # data = <<0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x00>>
#   # 3
#   {:ok, _} = Circuits.SPI.transfer(ref, data)
#   Process.sleep(100)
# end)

# Enum.each(timing_range, fn tindex ->
#   data = Enum.reduce(led_range, <<>>, fn lindex, leds ->
#     case rem(tindex, 3) do
#         0 -> leds <> <<50, 0, 0>> <> <<0, 50, 0>> <> <<0, 0, 50>>
#         1 -> leds <> <<0, 50, 0>> <> <<0, 0, 50>> <> <<50, 0, 0>>
#         2 -> leds <> <<0, 0, 50>> <> <<50, 0, 0>> <> <<0, 50, 0>>
#       end
#     end)
#   {:ok, _} = Circuits.SPI.transfer(ref, data)
#   Process.sleep(2_000)
# end)

data =
  Enum.reduce(led_range, <<>>, fn _lindex, leds ->
    leds <> <<0x00, 0x00, 0x00>>
  end)

{:ok, _} = Circuits.SPI.transfer(ref, data)

# This is a rainbow
# rainbow_range = Enum.to_list(1..10)
# data =
#   Enum.reduce(led_range, <<>>, fn _lindex, leds ->
#     leds
#         <> <<254,    0,    0>>
#         <> <<188,   65,    0>>
#         <> <<170,  134,    0>>
#         <> <<107,  200,    0>>
#         <> <<  0,  239,   14>>
#         <> <<  0,  172,   81>>
#         <> <<  0,   38,  216>>
#         <> << 49,    0,  204>>
#         <> <<115,    0,  139>>
#         <> <<184,    0,   69>>
#   end)
# {:ok, _} = Circuits.SPI.transfer(ref, data)

# 4
:ok = Circuits.SPI.close(ref)
```
